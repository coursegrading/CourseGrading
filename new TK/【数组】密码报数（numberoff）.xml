<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[【数组】密码报数（numberoff）]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>
	<span style="font-size:medium;">编号为1、2、3、…、N的N个人按顺时针方向围坐一圈，每人持有一个密码（正整数）。从指定编号为1的人开始，按顺时针方向自1开始顺序报数，报到指定数M时停止报数，报M的人出列，并将他的密码作为新的M值，从他在顺时针方向的下一个人开始，重新从1报数，依此类推，直至所有的人全部出列为止。请设计一个程序求出出列的顺序，其中N≤1000，M及密码值从键盘输入。</span> 
</p>]]></description>
<input><![CDATA[<p>
	<span style="font-size:medium;">第一行两个数N、M；<br />
</span> 
</p>
<p>
	<span style="font-size:medium;">第二行，N个密码。</span> 
</p>]]></input> 
<output><![CDATA[<p>
	<span style="font-size:medium;">N个人出列的顺序。</span> 
</p>]]></output>
<sample_input><![CDATA[7 6
3 1 7 2 4 8 4
]]></sample_input>
<sample_output><![CDATA[6 1 4 7 2 3 5
]]></sample_output>
  <test_input><![CDATA[20 11
7 4 8 9 4 10 20 37 12 15 16 33 20 9 21 7 25 21 28 3
]]></test_input>
<test_output><![CDATA[11 7 9 2 6 19 18 12 4 20 5 14 15 13 17 16 8 10 1 3
]]></test_output>
<test_input><![CDATA[30 1
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30]]></test_input>
<test_output><![CDATA[1 2 4 8 16 5 11 23 24 27 9 20 22 30 26 17 21 12 10 6 19 25 28 18 15 14 3 29 7 13
]]></test_output>
<test_input><![CDATA[8 20
13 11 7 20 14 28 4 19
]]></test_input>
<test_output><![CDATA[4 2 8 6 5 1 3 7
]]></test_output>
<test_input><![CDATA[1000 9
82 72 27 6 13 2 70 93 77 72 23 72 3 75 61 11 89 29 62 92 2 15 89 42 52 42 42 49 57 72 6 4 80 30 96 20 84 20 91 45 14 20 94 5 45 14 70 35 9 71 97 82 13 91 69 72 76 57 88 51 97 20 30 60 44 98 89 71 28 28 82 70 23 88 92 23 84 67 37 43 37 68 35 38 1 55 86 43 1 70 94 50 68 17 59 52 1 12 62 65 3 90 51 36 30 66 27 5 59 32 50 82 93 62 89 21 87 47 2 69 75 85 50 12 88 70 8 96 39 17 84 58 99 32 39 53 63 3 72 38 88 27 86 56 64 51 57 91 35 63 16 61 35 58 62 69 64 58 11 25 90 17 84 3 93 22 28 57 93 31 12 67 56 56 40 39 9 2 97 77 13 57 43 82 13 13 36 70 25 29 41 8 60 74 69 59 52 61 61 55 99 32 69 32 68 48 54 14 8 81 62 38 83 94 30 82 38 42 51 75 72 86 83 84 21 85 81 48 80 80 7 18 79 60 88 87 88 60 58 82 16 40 95 50 83 88 1 86 20 68 50 26 44 48 15 86 58 48 17 48 17 43 53 65 99 29 26 17 36 23 28 36 99 67 30 85 7 27 62 90 38 77 20 62 84 39 33 33 47 50 4 98 15 36 81 76 80 64 21 90 16 66 18 21 27 1 25 30 21 75 78 9 69 92 99 18 41 79 44 34 39 33 35 57 38 95 24 54 8 2 67 87 13 58 1 42 84 92 40 93 55 87 43 72 98 36 78 73 89 17 87 95 38 34 29 47 75 63 67 12 3 21 52 50 55 60 49 40 61 36 47 50 76 84 59 83 55 43 34 5 39 76 99 60 66 78 91 7 36 76 44 58 14 48 41 93 42 98 79 44 66 65 96 48 15 73 14 84 65 23 68 5 50 14 8 43 64 15 57 37 22 36 35 45 38 50 80 74 16 38 23 10 40 55 59 93 9 80 57 89 69 68 24 9 58 61 51 72 13 5 76 60 1 93 82 89 16 18 47 3 93 93 39 42 12 26 4 85 18 42 20 37 94 93 19 2 36 3 33 87 62 54 6 5 99 32 75 63 71 95 52 12 22 86 53 57 49 51 50 93 32 67 46 83 67 70 87 59 8 16 22 84 15 35 68 28 56 24 82 93 22 98 81 40 69 10 59 29 42 71 22 43 72 67 21 84 7 90 80 36 42 6 97 16 81 31 41 70 28 17 33 93 66 73 62 54 41 52 62 34 78 98 92 75 85 19 60 45 44 31 45 10 40 83 48 1 38 34 86 91 17 9 35 54 34 90 31 21 7 69 79 69 88 27 78 86 71 14 60 42 28 88 67 34 41 60 57 56 28 37 30 69 39 75 13 57 68 96 99 44 76 40 68 94 19 16 33 66 78 10 59 6 66 21 90 9 97 35 38 56 55 32 9 35 7 13 62 42 59 17 46 55 50 89 66 98 12 21 3 86 56 88 99 56 64 95 93 45 23 88 55 62 88 42 14 12 91 60 89 59 49 62 32 32 11 81 40 3 87 49 20 50 57 53 34 40 84 28 44 56 1 20 32 37 35 58 93 72 76 5 76 59 40 78 98 18 39 82 27 30 93 61 43 39 6 2 15 96 22 5 84 26 81 11 58 51 2 89 28 80 92 33 12 62 65 36 62 80 73 78 83 34 50 83 21 14 23 33 20 67 29 31 87 72 66 58 62 24 57 78 66 50 26 67 48 72 80 38 32 48 3 88 36 31 98 78 81 19 74 79 13 65 47 4 96 17 25 4 46 45 79 50 91 65 3 99 83 84 87 34 68 98 90 60 56 59 26 80 52 94 22 56 39 23 45 51 49 30 68 52 53 25 38 62 19 24 52 31 65 23 68 53 94 78 39 68 66 98 89 80 69 75 2 7 80 22 56 40 54 41 85 38 26 73 8 14 7 96 15 68 90 79 81 64 81 24 59 79 3 95 81 14 35 74 79 4 11 28 91 21 15 23 44 94 17 91 85 31 88 87 17 62 36 70 80 72 81 11 75 57 11 17 20 78 98 17 62 85 95 67 84 59 26 80 24 94 49 57 10 99 46 13 7 46 65 94 4 81 43 26 21 16 73 80 94 61 98 61 67 91 67 50 74 28 19 61 48 69 46 47 9 87 36 52 33 34 17 69 97 52 21 15 67 60 78 87 96 23 19 68 86 50 56 84 59 38 29 27 85 93 52 28 12 99 36 24 77 72 68 73]]></test_input>
<test_output><![CDATA[9 86 141 229 309 330 332 419 476 478 481 543 640 696 736 787 868 964 17 107 134 167 195 265 367 416 460 463 505 573 613 653 704 742 775 824 847 914 993 5 20 114 179 279 344 418 434 494 583 619 722 786 867 875 957 8 105 138 142 170 203 274 346 383 491 546 578 614 692 747 812 916 933 940 968 43 145 214 313 388 395 440 537 545 633 703 738 834 900 995 36 57 139 220 299 322 359 433 479 516 548 624 726 728 833 876 901 920 992 27 72 152 219 273 385 459 515 592 668 717 763 858 904 982 42 64 129 177 187 228 281 323 363 423 464 513 530 610 654 756 771 844 935 11 38 61 174 240 334 401 482 547 593 691 715 829 909 997 90 173 241 257 325 371 427 525 606 676 688 693 764 846 927 983 54 162 185 200 264 343 396 510 531 559 632 639 682 761 796 814 886 890 917 989 96 159 175 225 250 333 350 370 413 475 501 542 553 631 706 779 816 888 925 953 48 89 91 211 289 349 461 585 627 667 789 879 882 899 15 93 182 254 312 324 402 487 586 701 702 730 735 808 921 29 102 222 335 336 391 448 550 569 626 648 705 752 797 827 892 926 49 60 124 140 194 291 295 408 522 657 671 750 853 855 965 7 104 153 204 246 368 424 485 620 680 768 800 860 919 50 147 231 238 317 379 429 449 467 471 502 596 719 758 804 895 923 956 40 103 178 181 199 285 407 430 488 576 577 634 661 745 838 881 999 97 98 116 146 226 351 480 607 690 770 880 22 44 52 172 276 403 554 659 663 815 898 947 87 230 347 465 489 594 636 647 746 801 928 3 47 156 266 305 353 409 514 566 597 711 828 871 13 18 67 208 233 355 397 462 615 638 694 781 784 832 869 896 37 176 244 315 484 495 574 716 744 845 912 943 59 202 256 392 497 571 650 677 831 930 82 198 298 406 533 656 822 929 944 73 111 193 294 358 457 498 581 608 712 810 866 894 58 151 184 320 381 447 541 617 741 907 41 71 217 282 420 490 662 818 966 19 128 303 338 511 551 604 673 835 863 918 70 119 121 261 288 354 414 439 552 727 755 791 811 950 112 267 310 453 454 642 700 806 990 168 280 452 575 672 792 931 1000 143 308 373 526 540 612 757 798 805 813 984 150 272 348 503 590 733 903 972 994 197 297 458 507 684 753 856 905 65 148 337 519 686 861 32 39 235 412 425 512 687 776 941 974 99 232 262 361 365 483 500 707 910 25 132 259 296 468 658 710 721 937 945 131 319 421 470 568 669 729 777 961 976 164 169 382 564 743 772 883 969 188 341 472 563 785 12 180 360 384 535 587 651 773 839 985 118 236 438 641 783 870 31 51 271 340 582 601 670 893 1 206 311 523 731 951 106 263 399 609 681 820 56 227 436 685 720 802 938 126 304 369 532 643 665 850 63 125 364 504 737 740 960 79 166 234 390 602 859 2 201 466 549 622 751 977 242 342 598 635 908 946 100 278 362 417 605 748 973 155 327 404 556 723 851 53 83 189 252 326 625 689 959 85 88 216 469 528 618 932 967 14 245 508 699 842 4 24 149 258 411 637 958 171 213 486 588 664 852 94 137 357 603 843 154 345 697 978 55 284 499 678 884 130 205 432 451 762 854 874 95 301 374 674 826 6 16 62 120 378 536 849 190 286 435 652 872 161 518 591 911 952 133 527 769 980 249 316 393 443 555 799 979 66 444 492 539 865 897 248 611 754 80 260 450 477 645 679 46 110 247 251 455 836 942 998 318 708 10 328 579 971 76 183 376 778 936 380 398 864 215 356 584 840 955 45 269 441 793 26 223 649 948 255 321 544 621 996 123 394 655 987 144 445 774 117 599 915 474 981 473 988 157 524 759 837 158 506 885 352 906 331 765 136 456 23 565 81 293 400 698 830 192 224 782 329 389 630 714 210 767 165 809 410 567 963 221 739 922 339 644 878 493 628 108 127 209 270 431 616 35 807 446 934 292 84 415 517 913 78 683 902 496 949 560 821 30 695 970 428 115 939 314 237 74 877 529 862 277 307 595 386 196 795 817 101 122 68 819 426 975 841 666 760 570 891 113 268 509 562 788 34 422 873 991 713 253 823 387 724 287 749 848 372 163 521 790 109 77 538 33 437 589 709 135 794 887 160 580 405 725 825 780 889 962 986 766 275 28 243 646 92 377 21 75 718 306 366 302 572 924 803 375 629 954 212 732 191 207 734 534 442 561 660 857 239 69 520 600 290 557 283 558 675 218 186 300 623
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[语言基础-数组]]></source>
		<solution language="C++"><![CDATA[#include<iostream>
#include<cstdio>
using namespace std;
int n,m,s,f,t;
bool a[1001];
int b[1001];
int main()
{
	cin>>n>>m;
	for (t=1;t<=n;++t) {cin>>b[t]; a[t]=false; }
	f=0;  t=0;  s=0;
	do
	{
		++t;	
		if (t==n+1) t=1;
		if (a[t]==false) s=s+1;	
		if (s==m) 
		{
			s=0;
			++f;
			if (f==1) cout<<t; 
				else cout<<" "<<t;
			a[t]=true;	
			m=b[t];
		}
	} while(f!=n);
	cout<<endl;
	return 0;
}
]]></solution>
	</item>
</fps>
